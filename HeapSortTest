
import java.util.Arrays;
import java.util.Comparator;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;

import heapsort.HeapSort;
import org.junit.jupiter.api.Test;

import java.util.Arrays;
import java.util.Comparator;

import static org.junit.jupiter.api.Assertions.*;

class HeapSortTest {

    // Test con array vacío
    @Test
    void sort_empty_array_should_do_nothing() {
        Integer[] emptyArray = {};
        HeapSort.sort(emptyArray);
        assertArrayEquals(new Integer[]{}, emptyArray);
    }

    // Test con un solo elemento
    @Test
    void sort_single_element_array_should_remain_unchanged() {
        Integer[] singleElementArray = {42};
        HeapSort.sort(singleElementArray);
        assertArrayEquals(new Integer[]{42}, singleElementArray);
    }

    // Test con dos elementos en orden
    @Test
    void sort_two_elements_already_sorted_should_remain_sorted() {
        Integer[] sortedArray = {1, 2};
        HeapSort.sort(sortedArray);
        assertArrayEquals(new Integer[]{1, 2}, sortedArray);
    }

    // Test con dos elementos desordenados
    @Test
    void sort_two_elements_unsorted_should_sort_correctly() {
        Integer[] unsortedArray = {2, 1};
        HeapSort.sort(unsortedArray);
        assertArrayEquals(new Integer[]{1, 2}, unsortedArray);
    }

    // Test con varios elementos ya ordenados
    @Test
    void sort_already_sorted_array_should_remain_sorted() {
        Integer[] sortedArray = {1, 2, 3, 4, 5};
        HeapSort.sort(sortedArray);
        assertArrayEquals(new Integer[]{1, 2, 3, 4, 5}, sortedArray);
    }

    // Test con varios elementos en orden inverso
    @Test
    void sort_reverse_sorted_array_should_sort_correctly() {
        Integer[] reverseArray = {5, 4, 3, 2, 1};
        HeapSort.sort(reverseArray);
        assertArrayEquals(new Integer[]{1, 2, 3, 4, 5}, reverseArray);
    }

    // Test con elementos repetidos
    @Test
    void sort_array_with_duplicates_should_sort_correctly() {
        Integer[] arrayWithDuplicates = {3, 1, 4, 3, 2, 2, 5};
        HeapSort.sort(arrayWithDuplicates);
        assertArrayEquals(new Integer[]{1, 2, 2, 3, 3, 4, 5}, arrayWithDuplicates);
    }

    // Test con valores negativos
    @Test
    void sort_array_with_negative_numbers_should_sort_correctly() {
        Integer[] arrayWithNegatives = {-1, -3, -2, 0, 2, 1};
        HeapSort.sort(arrayWithNegatives);
        assertArrayEquals(new Integer[]{-3, -2, -1, 0, 1, 2}, arrayWithNegatives);
    }

    // Test con valores mixtos
    @Test
    void sort_array_with_mixed_values_should_sort_correctly() {
        Integer[] mixedArray = {5, -1, 3, 0, -3, 2};
        HeapSort.sort(mixedArray);
        assertArrayEquals(new Integer[]{-3, -1, 0, 2, 3, 5}, mixedArray);
    }

    // Test con un Comparator personalizado
    @Test
    void sort_array_with_custom_comparator_should_sort_in_reverse_order() {
        Integer[] array = {1, 2, 3, 4, 5};
        HeapSort.sort(array, Comparator.reverseOrder());
        assertArrayEquals(new Integer[]{5, 4, 3, 2, 1}, array);
    }

    // Test con un array grande
    @Test
    void sort_large_array_should_sort_correctly() {
        Integer[] largeArray = new Integer[1000];
        Integer[] expected = new Integer[1000];
        for (int i = 0; i < 1000; i++) {
            largeArray[i] = 1000 - i;
            expected[i] = i + 1;
        }
        HeapSort.sort(largeArray);
        assertArrayEquals(expected, largeArray);
    }

    // Test con todos los elementos iguales
    @Test
    void sort_array_with_identical_elements_should_remain_unchanged() {
        Integer[] identicalArray = {3, 3, 3, 3, 3};
        HeapSort.sort(identicalArray);
        assertArrayEquals(new Integer[]{3, 3, 3, 3, 3}, identicalArray);
    }

    // Test con valores de tipo String
    @Test
    void sort_array_of_strings_should_sort_alphabetically() {
        String[] stringArray = {"banana", "apple", "cherry", "date"};
        HeapSort.sort(stringArray);
        assertArrayEquals(new String[]{"apple", "banana", "cherry", "date"}, stringArray);
    }

    // Test del método swap
    @Test
    void test_swap() {
        Integer[] array = {1, 2, 3}; // Estado inicial
        var heap = new HeapSort.BinaryHeap<>(array, Comparator.naturalOrder(), false); // No construye el heap
        heap.swap(0, 2); // Intercambia el primer y último elemento
        System.out.println("Array después del swap: " + Arrays.toString(array)); // Diagnóstico
        assertArrayEquals(new Integer[]{3, 2, 1}, array, "El intercambio no se realizó correctamente");
    }
}
